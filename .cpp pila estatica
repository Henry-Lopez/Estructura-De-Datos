#include "Pila.h"

Pila::Pila() {
    tope = nullptr;
    indiceTope = -1;
}

void Pila::push(int elemento) {
    if (pila_llena()) {
        cout << "La pila ha alcanzado su capacidad máxima." << endl;
    }
    else {
        indiceTope++;
        Nodo* nuevoNodo = &nodos[indiceTope];
        nuevoNodo->dato = elemento;
        nuevoNodo->siguiente = tope;
        tope = nuevoNodo;
        cout << "Elemento " << elemento << " insertado en la pila." << endl;
    }
}

bool Pila::pila_vacia() {
    return tope == nullptr;
}

bool Pila::pila_llena() {
    return indiceTope == MAX - 1;
}

void Pila::pop() {
    if (pila_vacia()) {
        cout << "La pila está vacía. No se puede eliminar ningún elemento." << endl;
    }
    else {
        Nodo* temp = tope;
        tope = tope->siguiente;
        indiceTope--;
        cout << "Elemento " << temp->dato << " eliminado de la pila." << endl;
    }
}

void Pila::LimpiarPila() {
    tope = nullptr;
    indiceTope = -1;
    cout << "La pila ha sido limpiada." << endl;
}

void Pila::ver_pila() {
    if (pila_vacia()) {
        cout << "La pila está vacía." << endl;
    }
    else {
        cout << "Elementos de la pila:" << endl;
        Nodo* temp = tope;
        while (temp != nullptr) {
            cout << temp->dato << endl;
            temp = temp->siguiente;
        }
    }
}

bool Pila::Iguales(Pila& otra_pila) {
    Nodo* temp1 = tope;
    Nodo* temp2 = otra_pila.tope;

    while (temp1 != nullptr && temp2 != nullptr) {
        if (temp1->dato != temp2->dato) {
            return false;
        }
        temp1 = temp1->siguiente;
        temp2 = temp2->siguiente;
    }
    return temp1 == nullptr && temp2 == nullptr;
}
